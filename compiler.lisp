(cond
    ((print (quote .globl\ app\napp:\n)) ())
    (((lambda (printnum increment)
        ((lambda (getsymbol)
            ((lambda (applylist gendata gencond evlist)
                ((lambda (compile)
                    (compile compile (read) (quote (0))))
                    (lambda (compile exp label)
                        (cond
                            ((eq exp ())
                                (cond
                                    ((eq (print (quote xor\ eax,\ eax\n)) ()) label)
                                ))
                            ((atom exp)
                                ((lambda (symbol_label)
                                    (cond
                                        ((print (quote mov\ rdi,\ rax\n)) ())
                                        ((eq (print (quote call\ get_val\n)) ()) symbol_label)
                                    ))
                                    (getsymbol exp label)
                                ))
                            ((eq (car exp) (quote quote)) (gendata gendata (car (cdr exp)) label))
                            ((eq (car exp) (quote cond)) (gencond gencond compile (cdr exp) (increment increment (increment increment label)) (increment increment label) label))
                            ((eq (car exp) (quote lambda))
                                (cond
                                    ((print (quote call\ L)) ())
                                    ((printnum printnum label) ())
                                    ((eq (print (quote \n)) ())
                                        ((lambda (apply_label)
                                            ((lambda (comp_label)
                                                (cond
                                                    ((print (quote ret\nL)) ())
                                                    ((printnum printnum label) ())
                                                    ((print (quote :\n)) ())
                                                    ((print (quote pop\ rdi\n)) ())
                                                    ((eq (print (quote call\ gen_closure\n)) ()) comp_label)
                                                ))
                                                (compile compile (car (cdr (cdr exp))) apply_label)
                                            ))
                                            (applylist applylist (car (cdr exp)) (increment increment label))
                                        ))
                                ))
                            ((quote t)
                                ((lambda (comp_label)
                                    (cond
                                        ((eq (print (quote push\ rax\n)) ()) (evlist evlist compile (cdr exp) comp_label (quote t)))
                                    ))
                                    (compile compile (car exp) label)
                                ))
                        ))
                    ))
                (lambda (applylist exp label)
                    (cond
                        ((eq exp ()) label)
                        ((print (quote push\ rdi\n)) ())
                        ((print (quote call\ car\n)) ())
                        ((print (quote mov\ rdi,\ rax\n)) ())
                        ((eq (print (quote push\ rdi\n)) ())
                            ((lambda (new_label)
                                (cond
                                    ((print (quote mov\ rdi,\ rax\n)) ())
                                    ((print (quote pop\ rsi\n)) ())
                                    ((print (quote call\ set_var\n)) ())
                                    ((print (quote pop\ rdi\n)) ())
                                    ((print (quote call\ cdr\n)) ())
                                    ((eq (print (quote mov\ rdi,\ rax\n)) ()) (applylist applylist (cdr exp) new_label))
                                ))
                                (getsymbol (car exp) label)
                        ))
                    ))
                (lambda (gendata exp label)
                    (cond
                        ((eq exp ())
                            (cond ((eq (print (quote xor\ eax,\ eax\n)) ()) label)))
                        ((atom exp) (getsymbol exp label))
                        ((quote t)
                            ((lambda (new_label)
                                (cond
                                    ((eq (print (quote push\ rax\n)) ()) ((lambda (gen_label)
                                        (cond
                                            ((print (quote mov\ rsi,\ rax\n)) ())
                                            ((print (quote pop\ rdi\n)) ())
                                            ((eq (print (quote call\ cons\n)) ()) gen_label)
                                        ))
                                        (gendata gendata (cdr exp) new_label)
                                    ))
                                ))
                                (gendata gendata (car exp) label)
                            ))
                    ))
                (lambda (gencond compile exp label prev_label endlabel)
                    (cond
                        ((eq exp ()) (cond
                            ((print (quote L)) ())
                            ((printnum printnum endlabel) ())
                            ((eq (print (quote :\n)) ()) label)
                        ))
                        ((print (quote L)) ())
                        ((printnum printnum prev_label) ())
                        ((print (quote :\n)) ())
                        ((quote t)
                            ((lambda (comp_label)
                                (cond
                                    ((print (quote test\ rax,\ rax\n)) ())
                                    ((print (quote jz\ L)) ())
                                    ((printnum printnum (cond
                                        ((eq (cdr exp) ()) endlabel)
                                        ((quote t) comp_label)
                                    )) ())
                                    ((print (quote \n)) ())
                                    ((quote t)
                                        ((lambda (comp2_label)
                                            (cond
                                                ((print (quote jmp\ L)) ())
                                                ((printnum printnum endlabel) ())
                                                ((eq (print (quote \n)) ()) (gencond gencond compile (cdr exp) comp2_label comp_label endlabel))
                                            ))
                                            (compile compile (car (cdr (car exp))) (increment increment comp_label))
                                        ))
                                ))
                                (compile compile (car (car exp)) label)
                            ))
                    ))
                (lambda (evlist compile exp label first)
                    (cond
                        ((eq exp ())
                            (cond
                                ((print (quote xor\ esi,\ esi\n)) ())
                                ((cond ((eq first ()) (print (quote pop\ rsi\n)))) ())
                                ((print (quote pop\ rdi\n)) ())
                                ((eq (print (quote call\ apply\n)) ()) label)
                            ))
                        ((eq first ())
                            (cond
                                ((print (quote push\ rax\n)) ())
                                ((quote t)
                                    ((lambda (comp_label)
                                        (cond
                                            ((print (quote mov\ rdi,\ rax\n)) ())
                                            ((print (quote xor\ esi,\ esi\n)) ())
                                            ((print (quote call\ cons\n)) ())
                                            ((print (quote pop\ rdi\n)) ())
                                            ((print (quote mov\ [rdi],\ rax\n)) ())
                                            ((eq (print (quote add\ rax,\ 9\n)) ()) (evlist evlist compile (cdr exp) comp_label ()))
                                        ))
                                        (compile compile (car exp) label)
                                    ))
                            ))
                        ((quote t)
                            ((lambda (comp_label)
                                (cond
                                    ((print (quote mov\ rdi,\ rax\n)) ())
                                    ((print (quote xor\ esi,\ esi\n)) ())
                                    ((print (quote call\ cons\n)) ())
                                    ((print (quote push\ rax\n)) ())
                                    ((eq (print (quote add\ rax,\ 9\n)) ()) (evlist evlist compile (cdr exp) comp_label ()))
                                ))
                                (compile compile (car exp) label)
                            ))
                    ))
            ))
            (lambda (sym label)
                (cond
                    ((print (quote push\ rdi\n)) ())
                    ((print (quote jmp\ L)) ())
                    ((printnum printnum label) ())
                    ((print (quote _skip\nL)) ())
                    ((printnum printnum label) ())
                    ((print (quote _str:\n)) ())
                    ((print (quote .asciz\ \\")) ())
                    ((print sym) ())
                    ((print (quote \\"\nL)) ())
                    ((printnum printnum label) ())
                    ((print (quote _skip:\n)) ())
                    ((print (quote lea\ rdi,\ [rip\ +\ L)) ())
                    ((printnum printnum label) ())
                    ((print (quote _str]\n)) ())
                    ((print (quote call\ symbol\n)) ())
                    ((eq (print (quote pop\ rdi\n)) ()) (increment increment label))
                ))
        ))
        (lambda (printnum number)
            (cond
                ((eq (cdr number) ()) (print (car number)))
                ((eq (printnum printnum (cdr number)) ()) (print (car number)))
            ))
        (lambda (increment number)
            (cond
                ((eq number ()) (cons (quote 1) ()))
                ((eq (car number) (quote 0)) (cons (quote 1) (cdr number)))
                ((eq (car number) (quote 1)) (cons (quote 2) (cdr number)))
                ((eq (car number) (quote 2)) (cons (quote 3) (cdr number)))
                ((eq (car number) (quote 3)) (cons (quote 4) (cdr number)))
                ((eq (car number) (quote 4)) (cons (quote 5) (cdr number)))
                ((eq (car number) (quote 5)) (cons (quote 6) (cdr number)))
                ((eq (car number) (quote 6)) (cons (quote 7) (cdr number)))
                ((eq (car number) (quote 7)) (cons (quote 8) (cdr number)))
                ((eq (car number) (quote 8)) (cons (quote 9) (cdr number)))
                ((eq (car number) (quote 9)) (cons (quote 0) (increment increment (cdr number))))
            ))
        )
        (print (quote ret\n))
    )
    ((quote t) (print (quote ret\n)))
)
